{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Dependency injection", :emoji nil, :path "#dependency-injection", :items [{:title "Install", :emoji nil, :path "#install", :items []} {:title "Comparison with other tools", :emoji nil, :path "#comparison-with-other-tools", :items []} {:title "Tutorial", :emoji nil, :path "#tutorial", :items [{:title "Base", :emoji nil, :path "#base", :items []} {:title "Advanced", :emoji nil, :path "#advanced", :items []}]} {:title "Example app", :emoji nil, :path "#example-app", :items []} {:title "API", :emoji nil, :path "#api", :items [{:title "darkleaf.di.core", :emoji nil, :path "#darkleaf.di.core", :items []} {:title "darkleaf.di.protocols", :emoji nil, :path "#darkleaf.di.protocols", :items []}]} {:title "License", :emoji nil, :path "#license", :items []}]}], :nextjournal/render-opts {:toc-visibility true, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility true, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns index), :file "notebooks/index.clj", :scope index, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil nil [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "notebooks/index.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Dependency injection", :description "DI is a dependency injection framework that allows you to define dependencies as easily as you define function arguments."}, :title "Dependency injection", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5dsZHxzNVS4eJCd9chEddSC3vpLGYj"} ["h1" {:id "dependency-injection"} [:<> "Dependency injection"]] [:p [:a {:href "https://github.com/darkleaf/di"} [:<> "DI"]] [:<> " is a dependency injection framework"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "that allows you to define dependencies as easily as you define function arguments."]] [:p [:<> "It uses plain clojure functions and "] [:a {:href "https://clojure.org/guides/destructuring#_associative_destructuring"} [:<> "associative destructuring"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to define a graph of functions and stateful objects."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(ns app.core\n  (:require\n   [darkleaf.di.core :as di]\n   [ring.adapter.jetty :as jetty]\n   [app.adapters.reitit :as-alias reitit]\n   [app.adapters.hikari :as-alias hikari]\n   [app.adapters.db     :as-alias db]))\n\n(defn show-user [{ds ::db/datasource} req]\n  ...)\n\n(def route-data\n  (di/template\n    [[\"/users/:id\" {:get {:handler (di/ref `show-user)}}]]))\n\n(defn jetty\n  {::di/stop (memfn stop)}\n  [{handler ::handler\n    port    :env.long/PORT\n    :or     {port 8080}\n  (jetty/run-jetty handler {:join? false, :port port}))\n\n(di/start `jetty\n          (di/env-parsing :env/long parse-long)\n          {::handler           (di/ref `reitit/handler)\n           ::reitit/route-data (di/ref `reitit/data)\n           ::db/datasource     (di/ref `hikari/datasource)\n           \"PORT\"              \"9090\"})", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "It is just a short snippet, please see "] [:a {:href "https://github.com/darkleaf/di/tree/master/example"} [:<> "example app"]] [:<> "."]] ["h2" {:id "install"} [:<> "Install"]] [:p [:a {:href "https://clojars.org/org.clojars.darkleaf/di"} [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:img.inline {:src "https://img.shields.io/clojars/v/org.clojars.darkleaf/di.svg", :title nil}], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "{:deps {org.clojars.darkleaf/di {:mvn/version \"2.0.0\"}}}\n;; or\n{:deps {org.clojars.darkleaf/di {:git/url \"https://github.com/darkleaf/di.git\"\n                                 :sha     \"%SHA%\"}}}", :nextjournal/render-opts {:language "edn"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] ["h2" {:id "comparison-with-other-tools"} [:<> "Comparison with other tools"]]], :nextjournal/render-opts {:id "index/markdown-5dsZHxzNVS4eJCd9chEddSC3vpLGYj"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:a {:href "./notebooks/integrant"} "Comparison of Integrant and DI"], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dspt46ZtBJ6V4JMqdRHDYMkSPKtuk-result"}}, :nextjournal/blob-id "5dtdzH5nVAD6rTEEWyF9FKBy119cYu"}, :nextjournal/render-opts {:id "index/anon-expr-5dspt46ZtBJ6V4JMqdRHDYMkSPKtuk-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5dt4Z6uvgLY1sAZJBaSaFqVsDVnWNs"} ["h2" {:id "tutorial"} [:<> "Tutorial"]] [:p [:<> "Each chapter is a regular Clojure test namespace."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "You can clone "] [:a {:href "https://github.com/darkleaf/di"} [:<> "the repo"]] [:<> " and run each one in the REPL."]] ["h3" {:id "base"} [:<> "Base"]]], :nextjournal/render-opts {:id "index/markdown-5dt4Z6uvgLY1sAZJBaSaFqVsDVnWNs"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:ul [:li [:a {:href "./test/darkleaf/di/tutorial/a_intro_test"} "Intro"]] [:li [:a {:href "./test/darkleaf/di/tutorial/b_dependencies_test"} "Dependencies"]] [:li [:a {:href "./test/darkleaf/di/tutorial/c_stop_test"} "Stop"]] [:li [:a {:href "./test/darkleaf/di/tutorial/l_registries_test"} "Registries"]] [:li [:a {:href "./test/darkleaf/di/tutorial/m_abstractions_test"} "Abstractions"]] [:li [:a {:href "./test/darkleaf/di/tutorial/n_env_test"} "Env"]] [:li [:a {:href "./test/darkleaf/di/tutorial/o_data_dsl_test"} "Data DSL"]] [:li [:a {:href "./test/darkleaf/di/tutorial/p_fmap_test"} "Fmap"]] [:li [:a {:href "./test/darkleaf/di/tutorial/q_starting_many_keys_test"} "Starting many keys"]] [:li [:a {:href "./test/darkleaf/di/tutorial/r_multimethods_test"} "Multimethods"]]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dsGVmqtUWayjLfw85oNgdaN1oZuUa-result"}}, :nextjournal/blob-id "5dqrEiTTp5e4v9ukDGaUAHju9MScqm"}, :nextjournal/render-opts {:id "index/anon-expr-5dsGVmqtUWayjLfw85oNgdaN1oZuUa-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5duKC9eBoS7rMHBTLSnxiGahUA43UB"} ["h3" {:id "advanced"} [:<> "Advanced"]]], :nextjournal/render-opts {:id "index/markdown-5duKC9eBoS7rMHBTLSnxiGahUA43UB"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:ul [:li [:a {:href "./test/darkleaf/di/tutorial/x_add_side_dependency_test"} "Add a side dependency"]] [:li [:a {:href "./test/darkleaf/di/tutorial/x_update_key_test"} "Update key"]] [:li [:a {:href "./test/darkleaf/di/tutorial/x_log_test"} "Log"]] [:li [:a {:href "./test/darkleaf/di/tutorial/x_inspect_test"} "Inspect"]] [:li [:a {:href "./test/darkleaf/di/tutorial/y_graceful_stop_test"} "Graceful stop"]] [:li [:a {:href "./test/darkleaf/di/tutorial/y_multi_arity_service_test"} "Multi arity service"]] [:li [:a {:href "./test/darkleaf/di/tutorial/z_multi_system_test"} "Multi system"]] [:li [:a {:href "./test/darkleaf/di/tutorial/z_two_databases_test"} "Two Databases"]]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dtecVFQdDSfxj6cyG45F4XQYBrFg9-result"}}, :nextjournal/blob-id "5ds3sAGvMcpiQwRsqNERdS9NYgoLCE"}, :nextjournal/render-opts {:id "index/anon-expr-5dtecVFQdDSfxj6cyG45F4XQYBrFg9-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5drZqFSgWdJTroY2QT1MFwJFWbBxLX"} ["h2" {:id "example-app"} [:<> "Example app"]] [:p [:a {:href "https://github.com/darkleaf/di/tree/master/example"} [:<> "Example app"]]] [:p [:<> "Start with "] [:a {:href "https://github.com/darkleaf/di/blob/master/example/dev/user.clj"} [:<> "user.clj"]]] ["h2" {:id "api"} [:<> "API"]] [:p [:a {:href "https://cljdoc.org/d/org.clojars.darkleaf/di/CURRENT"} [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:img.inline {:src "https://cljdoc.org/badge/org.clojars.darkleaf/di", :title nil}], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]]]], :nextjournal/render-opts {:id "index/markdown-5drZqFSgWdJTroY2QT1MFwJFWbBxLX"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5dsukFT2qETRPkSsYGHJ5Q73ZZPhXX"} ["h3" {:id "darkleaf.di.core"} [:code [:<> "darkleaf.di.core"]]]], :nextjournal/render-opts {:id "index/markdown-5dsukFT2qETRPkSsYGHJ5Q73ZZPhXX"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/start"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([key & middlewares])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Starts a system of dependent objects."]] [:p [:<> "key is a name of the system root."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Use symbols for var names, keywords for abstract dependencies,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and strings for environments variables."]] [:p [:<> "key is looked up in a registry."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "By default registry uses Clojure namespaces and system env"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to resolve symbols and strings, respectively."]] [:p [:<> "You can extend it with registry middlewares."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Each middleware can be one of the following form:"]] [:ul [:li [:<> [:<> "a function "] [:code [:<> "registry -> key -> Factory"]]]] [:li [:<> [:<> "a map of key and "] [:code [:<> "p/Factory"]] [:<> " instance"]]] [:li [:<> [:<> "nil, as no-op middleware"]]] [:li [:<> [:<> "a sequence of the previous forms"]]]] [:p [:<> "Middlewares also allows you to instrument built objects."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "It's useful for logging, schema validation, AOP, etc."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "See "] [:code [:<> "update-key"]] [:<> "."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(di/start `root\n          {:my-abstraction implemntation\n           `some-key replacement\n           \"LOG_LEVEL\" \"info\"}\n          [dev-middlwares test-middlewares]\n          (if dev-routes?\n            (di/update-key `route-data conj `dev-route-data)\n          (di/instrument `log))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "Returns a container contains started root of the system."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "The container implements "] [:code [:<> "AutoCloseable"]] [:<> ", "] [:code [:<> "IDeref"]] [:<> ", "] [:code [:<> "IFn"]] [:<> ", "] [:code [:<> "Indexed"]] [:<> " and "] [:code [:<> "ILookup"]] [:<> "."]] [:p [:<> "Use "] [:code [:<> "with-open"]] [:<> " in tests to stop the system reliably."]] [:p [:<> "You can pass a vector as the key argument to start many keys:"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(with-open [root (di/start [`handler `helper])]\n  (let [[handler helper] root]\n     ...))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "See the tests for use cases."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "See "] [:code [:<> "update-key"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5du6YW5UnDzyW9TerCWjrz12KjtFcG-result"}}, :nextjournal/blob-id "5drvb4R61tuQmRzxupdNcxGjWd7xzk"}, :nextjournal/render-opts {:id "index/anon-expr-5du6YW5UnDzyW9TerCWjrz12KjtFcG-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/stop"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([root])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Stops the root of a system"]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drR2Qm5x4V9M78EozxsbcC1hWuyFa-result"}}, :nextjournal/blob-id "5drjZpYzKRLP1vETQSdMZ5g9yFPPGP"}, :nextjournal/render-opts {:id "index/anon-expr-5drR2Qm5x4V9M78EozxsbcC1hWuyFa-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/inspect"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([key & middlewares])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Collects and returns a vector of keys along with their dependencies."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Useful for inspecting enabled components and services."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Evaluates all registries with middlewares applied."]] [:p [:<> "Expects the same arguments as "] [:code [:<> "start"]] [:<> " and returns a vector of keys with dependencies e.g.:"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "[{:key `root :dependencies {`foo :required `bar :optional}}\n {:key `foo}\n {:key `bar}]", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drGe1KKSo9NCH1mkFjnimoBNjXy3g-result"}}, :nextjournal/blob-id "5drGT6DNmeCLjeABwdREu2x348EJHv"}, :nextjournal/render-opts {:id "index/anon-expr-5drGe1KKSo9NCH1mkFjnimoBNjXy3g-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/ref"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([key])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Returns a factory referencing to a key."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(def port (di/ref \"PORT\"))\n(defn server [{port `port}] ...)\n\n(def routes (di/template [[\"/posts\" (di/ref `handler)]]))\n\n(di/start `root {::my-abstraction (di/ref `my-implementation)})", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "See "] [:code [:<> "template"]] [:<> ", "] [:code [:<> "opt-ref"]] [:<> ", "] [:code [:<> "derive"]] [:<> ", "] [:code [:<> "p/build"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5driPARPUDuU6NKKBSukGPVHJF2sRH-result"}}, :nextjournal/blob-id "5dt8wMYBR8spxuLfSN61Ygt2BaLJLf"}, :nextjournal/render-opts {:id "index/anon-expr-5driPARPUDuU6NKKBSukGPVHJF2sRH-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/opt-ref"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([key])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Returns a factory referencing to a possible undefined key."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Produces nil in that case."]] [:p [:<> "See "] [:code [:<> "template"]] [:<> ", "] [:code [:<> "ref"]] [:<> ", "] [:code [:<> "derive"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5duE77rjhij5gGXB2Zs9NmoBKh5rtL-result"}}, :nextjournal/blob-id "5dtDRA2YoN6gUuVZaXSVzw8BUyJX2e"}, :nextjournal/render-opts {:id "index/anon-expr-5duE77rjhij5gGXB2Zs9NmoBKh5rtL-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/template"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([form])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Returns a factory for templating a data-structure."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Replaces "] [:code [:<> "ref"]] [:<> " or "] [:code [:<> "opt-ref"]] [:<> " instances with built objects."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(def routes (di/template [[\"/posts\" (di/ref `handler)]]))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "See "] [:code [:<> "ref"]] [:<> " and "] [:code [:<> "opt-ref"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drBDsTj7QpkqNa4PCLjGH5pnXnEQ5-result"}}, :nextjournal/blob-id "5dsGnKrwWzKHQ6SKyTuRbudQGmJaXH"}, :nextjournal/render-opts {:id "index/anon-expr-5drBDsTj7QpkqNa4PCLjGH5pnXnEQ5-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/derive"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([key f & args])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Applies "] [:code [:<> "f"]] [:<> " to an object built from "] [:code [:<> "key"]] [:<> "."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(def port (-> (di/derive \"PORT\" (fnil parse-long \"8080\"))))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "See "] [:code [:<> "ref"]] [:<> ", "] [:code [:<> "template"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dtVwoVt5DxtyP66HrpRUGY4DZj7M9-result"}}, :nextjournal/blob-id "5droZBj9dxs5jsQM5gYuBkGd2yAQJZ"}, :nextjournal/render-opts {:id "index/anon-expr-5dtVwoVt5DxtyP66HrpRUGY4DZj7M9-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/env-parsing"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([& {:as cmap}])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "A registry middleware for parsing environment variables."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "You can define a dependency of env as a string key like \"PORT\","] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and its value will be a string."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "With this middleware, you can define it as a qualified keyword like :env.long/PORT,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and its value will be a number."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "cmap is a map of prefixes and parsers."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(defn root [{port :env.long/PORT}]\n  ...)\n\n(di/start `root (di/env-parsing :env.long parse-long\n                                :env.edn  edn/read-string\n                                :env.json json/read-value))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dquSsDfiFDjVRXweAGMyXsRh3ATLE-result"}}, :nextjournal/blob-id "5drSh7PQWfRGVTw7poMRxSzwMYMP1B"}, :nextjournal/render-opts {:id "index/anon-expr-5dquSsDfiFDjVRXweAGMyXsRh3ATLE-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/update-key"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([target f & args])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "A registry middleware for updating built objects."]] [:p [:<> "target is a key to update."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "f and args are intances of "] [:code [:<> "p/Factory"]] [:<> "."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "For example, a factory can be a regular object or "] [:code [:<> "(di/ref key)"]] [:<> "."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(def routes [])\n(def subsystem-routes (di/template [[\"/posts\" (di/ref `handler)]]))\n\n(di/start ::root (di/update-key `routes conj (di/ref `subsystem-routes)))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:p [:<> "See "] [:code [:<> "start"]] [:<> ", "] [:code [:<> "derive"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drXvpYZ4eSGtpYnwWsAEZXDmKLo3R-result"}}, :nextjournal/blob-id "5dsNYsFHoaw8ujzJiJrt8uwgbVEJrB"}, :nextjournal/render-opts {:id "index/anon-expr-5drXvpYZ4eSGtpYnwWsAEZXDmKLo3R-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/add-side-dependency"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([dep-key])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "A registry middleware for adding side dependencies."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Use it for migrations or other side effects."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(defn flyway [{url \"DATABASE_URL\"}]\n  (.. (Flyway/configure)\n      ...))\n\n(di/start ::root (di/add-side-dependency `flyway))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drLHd85ME1DavFKiSKb9JCPDMTV1e-result"}}, :nextjournal/blob-id "5drG1kxwFW979pKvtonNw4WUtTNxMt"}, :nextjournal/render-opts {:id "index/anon-expr-5drLHd85ME1DavFKiSKb9JCPDMTV1e-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/ns-publics"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "A registry middleware that interprets a whole namespace as a component."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "A component will be a map of var names to corresponding components."]] [:p [:<> "The key of a component is a keyword with the namespace "] [:code [:<> ":ns-publics"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and a name containing the name of a target ns."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "For example "] [:code [:<> ":ns-publics/io.gihub.my.ns"]] [:<> "."]] [:p [:<> "This enables access to all public components, which is useful for testing."]] [:p [:<> "See the test darkleaf.di.tutorial.x-ns-publics-test."]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:div.code-viewer.code-listing [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0], :nextjournal/value "(di/start :ns-publics/io.gihub.my.ns (di/ns-publics))", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dtdasVESqgza8cJSDKKpWay4uFSyh-result"}}, :nextjournal/blob-id "5dsD3Y2eeoUehsmNhixNm3Ud5ghoJr"}, :nextjournal/render-opts {:id "index/anon-expr-5dtdasVESqgza8cJSDKKpWay4uFSyh-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/log"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([&\n  {:keys [after-build! after-demolish!],\n   :or {after-build! (fn no-op [_]), after-demolish! (fn no-op [_])}}])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "A logging middleware."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Calls "] [:code [:<> ":after-build!"]] [:<> " and "] [:code [:<> ":after-demolish!"]] [:<> " during "] [:code [:<> "di/start"]] [:<> "."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Must be the last one in the middleware chain."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Both callbacks are expected to accept"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "the following arg "] [:code [:<> "{:keys [key object]}"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dtivxRqmcUyzHfA3acv1tpfQ9Znfk-result"}}, :nextjournal/blob-id "5dsdGrjbUi7oDFQZroVVwXN2bVWocY"}, :nextjournal/render-opts {:id "index/anon-expr-5dtivxRqmcUyzHfA3acv1tpfQ9Znfk-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.core/combine-dependencies"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([] [a b])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Combines dependencies. Use it with "] [:code [:<> "reduce"]] [:<> "."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Dependencies are a hash map of a key and a dependency type."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5du6hcpcJ2bvBmsWy2gKpvLbTqNK1G-result"}}, :nextjournal/blob-id "5dtJtxzLHJoT1D5JPmfoEZjcH5ciyg"}, :nextjournal/render-opts {:id "index/anon-expr-5du6hcpcJ2bvBmsWy2gKpvLbTqNK1G-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5dsn5jEZCnxRA2pzon4Fj34ykX32be"} ["h3" {:id "darkleaf.di.protocols"} [:code [:<> "darkleaf.di.protocols"]]] [:p [:code [:<> "darkleaf.di.protocols/Factory"]]]], :nextjournal/render-opts {:id "index/markdown-5dsn5jEZCnxRA2pzon4Fj34ykX32be"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.protocols/dependencies"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([this])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Returns a map of a key and a dependency type."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "A type can be "] [:code [:<> ":required"]] [:<> " or "] [:code [:<> ":optional"]] [:<> "."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5drQziDEqjzeAcYpoLnKmeRQyajkrc-result"}}, :nextjournal/blob-id "5dsAjoJ2NKoDTtRLd7b7MXehUGFK4U"}, :nextjournal/render-opts {:id "index/anon-expr-5drQziDEqjzeAcYpoLnKmeRQyajkrc-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.protocols/build"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([this dependencies add-stop])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Builds an object from dependencies."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5dth2gmcQYoG18wKo4cvpRhzGLWfxs-result"}}, :nextjournal/blob-id "5dtiw5jddKSKE1eqeMKcyzx9c6FvW9"}, :nextjournal/render-opts {:id "index/anon-expr-5dth2gmcQYoG18wKo4cvpRhzGLWfxs-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value {:nextjournal/presented {:path [0], :nextjournal/value [:<> [:h4 [:code "darkleaf.di.protocols/description"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 0], :nextjournal/value "([this])", :nextjournal/render-opts {:language "clojure"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code, :hash "5dsJQw12yyyd7TcZEf52VSHxnqnJUC"}}] [#viewer-eval nextjournal.clerk.render/inspect-presented {:path [0 1], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id nil} [:p [:<> "Returns a map with the factory description."]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]], :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}, :nextjournal/render-opts {:id "index/anon-expr-5duEy91KKootfTVoWfMf2hcZNYcsNL-result"}}, :nextjournal/blob-id "5dscZ2rcW3pewjBY21n8pygnknyBkw"}, :nextjournal/render-opts {:id "index/anon-expr-5duEy91KKootfTVoWfMf2hcZNYcsNL-result"}, :nextjournal/visibility {:code :hide, :result :show}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "index/markdown-5dre9oLwmx5XRGfTN64JfWhLsqUnjS"} ["h2" {:id "license"} [:<> "License"]] [:p [:<> "Copyright © 2022 Mikhail Kuzmin"]] [:p [:<> "Licensed under Eclipse Public License v2.0."]]], :nextjournal/render-opts {:id "index/markdown-5dre9oLwmx5XRGfTN64JfWhLsqUnjS"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}