{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Derive", :emoji nil, :path "#derive", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.tutorial.p-derive-test), :file "test/darkleaf/di/tutorial/p_derive_test.clj", :scope darkleaf.di.tutorial.p-derive-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/tutorial/p_derive_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Derive", :description "In some cases, your components may have a complex structure or require transfromation. You can use di/derive to transform a component."}, :title "Derive", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5dtcvQg7PSophRSzqjrN9kc5KCoZaU"} ["h1" {:id "derive"} [:<> "Derive"]]], :nextjournal/render-opts {:id "user/markdown-5dtcvQg7PSophRSzqjrN9kc5KCoZaU"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.p-derive-test/markdown-5drWzz9TeQa6TBjW8qoL11NpgZCALJ"} [:p [:<> "In some cases, your components may have a complex structure or require transfromation."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "You can use "] [:code [:<> "di/derive"]] [:<> " to transform a component."]] [:p [:<> "The first way"]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.p-derive-test/markdown-5drWzz9TeQa6TBjW8qoL11NpgZCALJ"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn port\n  {::di/kind :component}\n  [{port \"PORT\"}]\n  (parse-long port))", :nextjournal/render-opts {:loc {:line 15, :end-line 18, :column 1, :end-column 21}, :id "darkleaf.di.tutorial.p-derive-test/port-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest port-test\n  (with-open [root (di/start `port {\"PORT\" \"8080\"})]\n    (t/is (= 8080 @root))))", :nextjournal/render-opts {:loc {:line 20, :end-line 22, :column 1, :end-column 28}, :id "darkleaf.di.tutorial.p-derive-test/port-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.p-derive-test/markdown-5dsQqkBjgFDA42rK1gTWEf9baz1Wyp"} [:p [:<> "The second way"]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.p-derive-test/markdown-5dsQqkBjgFDA42rK1gTWEf9baz1Wyp"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def port' (di/derive \"PORT\" parse-long))", :nextjournal/render-opts {:loc {:line 27, :end-line 27, :column 1, :end-column 42}, :id "darkleaf.di.tutorial.p-derive-test/port'-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest port'-test\n  (with-open [root (di/start `port' {\"PORT\" \"8080\"})]\n    (t/is (= 8080 @root))))", :nextjournal/render-opts {:loc {:line 29, :end-line 31, :column 1, :end-column 28}, :id "darkleaf.di.tutorial.p-derive-test/port'-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def -box (di/template [(di/opt-ref ::a)\n                        (di/opt-ref ::b)\n                        (di/opt-ref ::c)]))", :nextjournal/render-opts {:loc {:line 34, :end-line 36, :column 1, :end-column 44}, :id "darkleaf.di.tutorial.p-derive-test/-box-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def box (di/derive `-box (partial filter some?)))", :nextjournal/render-opts {:loc {:line 37, :end-line 37, :column 1, :end-column 51}, :id "darkleaf.di.tutorial.p-derive-test/box-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest box-test\n  (with-open [root (di/start `box {::b :b})]\n    (t/is (= [:b] @root))))", :nextjournal/render-opts {:loc {:line 39, :end-line 41, :column 1, :end-column 28}, :id "darkleaf.di.tutorial.p-derive-test/box-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}