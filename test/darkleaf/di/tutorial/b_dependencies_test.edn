{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Dependencies", :emoji nil, :path "#dependencies", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.tutorial.b-dependencies-test), :file "test/darkleaf/di/tutorial/b_dependencies_test.clj", :scope darkleaf.di.tutorial.b-dependencies-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/tutorial/b_dependencies_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Dependencies", :description "DI uses associative destructuring syntax to define dependencies of a component. https://clojure.org/guides/destructuring#_associative_destructuring"}, :title "Dependencies", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5dtGh71nzDmZjsuFdc1U5N3xkvG9SU"} ["h1" {:id "dependencies"} [:<> "Dependencies"]]], :nextjournal/render-opts {:id "user/markdown-5dtGh71nzDmZjsuFdc1U5N3xkvG9SU"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.b-dependencies-test/markdown-5dqz576mEZhmYEmgMR73nBepX1fKVm"} [:p [:<> "DI uses associative destructuring syntax to define dependencies of a component."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:a {:href "https://clojure.org/guides/destructuring#_associative_destructuring"} [:<> "https://clojure.org/guides/destructuring#_associative_destructuring"]]] [:p [:<> "There is a mapping between keys and components."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "A key can be symbol, keyword, or string."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "In this chapter we'll use only symbols."]] [:p [:<> "If we use symbols DI will try to resolve a component's var."]] [:p [:<> "In the following example the "] [:code [:<> "root"]] [:<> " component depends on"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "the "] [:code [:<> "a"]] [:<> " and "] [:code [:<> "b"]] [:<> " and the "] [:code [:<> "b"]] [:<> " is optional."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "You also can get all component dependencies by the "] [:code [:<> "deps"]] [:<> " binding."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.b-dependencies-test/markdown-5dqz576mEZhmYEmgMR73nBepX1fKVm"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn root\n  {::di/kind :component}\n  [{a      `a\n    ::syms [b]\n    :or    {b ::default}\n    :as    deps}]\n  [:root a b deps])", :nextjournal/render-opts {:loc {:line 25, :end-line 31, :column 1, :end-column 20}, :id "darkleaf.di.tutorial.b-dependencies-test/root-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def a ::a)", :nextjournal/render-opts {:loc {:line 33, :end-line 33, :column 1, :end-column 12}, :id "darkleaf.di.tutorial.b-dependencies-test/a-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest root-test\n  (with-open [root (di/start `root)]\n    (t/is (= [:root ::a ::default {`a ::a}] @root))))", :nextjournal/render-opts {:loc {:line 35, :end-line 37, :column 1, :end-column 54}, :id "darkleaf.di.tutorial.b-dependencies-test/root-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.b-dependencies-test/markdown-5drBW3rGzECZBa89yW88LLMWrUgLz8"} [:p [:code [:<> "di/start"]] [:<> " can accepts additional arguments."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "In the following example the argument is a map registry."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "I use it to define local keys."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "In general they are middlewares but I'll describe it later."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.b-dependencies-test/markdown-5drBW3rGzECZBa89yW88LLMWrUgLz8"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest root-with-extra-deps-test\n  (with-open [root (di/start `root {`b ::b})]\n    (t/is (= [:root ::a ::b {`a ::a `b ::b}] @root))))", :nextjournal/render-opts {:loc {:line 44, :end-line 46, :column 1, :end-column 55}, :id "darkleaf.di.tutorial.b-dependencies-test/root-with-extra-deps-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.b-dependencies-test/markdown-5dsr3me1jSoyNpYFzRmjCWQskqmJ6K"} [:p [:<> "Dependencies are required by default."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "There is no defenition of "] [:code [:<> "a'"]] [:<> " so DI will throw an exception."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.b-dependencies-test/markdown-5dsr3me1jSoyNpYFzRmjCWQskqmJ6K"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn root'\n  {::di/kind :component}\n  [{a `a'}]\n  [::root a])", :nextjournal/render-opts {:loc {:line 51, :end-line 54, :column 1, :end-column 14}, :id "darkleaf.di.tutorial.b-dependencies-test/root'-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest root'-test\n  (t/is (thrown-with-msg? ExceptionInfo\n                          #\"Missing dependency darkleaf.di.tutorial.b-dependencies-test/a'\"\n                          (di/start `root'))))", :nextjournal/render-opts {:loc {:line 56, :end-line 59, :column 1, :end-column 47}, :id "darkleaf.di.tutorial.b-dependencies-test/root'-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}