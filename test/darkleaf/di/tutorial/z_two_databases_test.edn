{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Two databases", :emoji nil, :path "#two-databases", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.tutorial.z-two-databases-test), :file "test/darkleaf/di/tutorial/z_two_databases_test.clj", :scope darkleaf.di.tutorial.z-two-databases-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/tutorial/z_two_databases_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Two databases", :description "In DI, each key corresponds to one object. So if you want to use two databases you have to define two keys."}, :title "Two databases", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5drCBkf5SZ5ThQHaFwxfb89jdWR9EE"} ["h1" {:id "two-databases"} [:<> "Two databases"]]], :nextjournal/render-opts {:id "user/markdown-5drCBkf5SZ5ThQHaFwxfb89jdWR9EE"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.z-two-databases-test/markdown-5dsSXJFG9dDD4PBZkAhYrRCYyvpfcr"} [:p [:<> "In DI, each key corresponds to one object. So if you want to use two databases"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "you have to define two keys."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.z-two-databases-test/markdown-5dsSXJFG9dDD4PBZkAhYrRCYyvpfcr"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn db-factory [db-name]\n  (let [db-name      (-> db-name name str/upper-case)\n        url-key      (str \"DB_\" db-name \"_URL\")\n        user-key     (str \"DB_\" db-name \"_USER\")\n        password-key (str \"DB_\" db-name \"_PASSWORD\")]\n    (reify p/Factory\n      (dependencies [_]\n        {url-key      :required\n         user-key     :required\n         password-key :required})\n      (build [_ deps]\n        [::db (deps url-key) (deps user-key) (deps password-key)])\n      (demolish [_ _obj]))))", :nextjournal/render-opts {:loc {:line 15, :end-line 27, :column 1, :end-column 29}, :id "darkleaf.di.tutorial.z-two-databases-test/db-factory-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def db-a (db-factory :a))", :nextjournal/render-opts {:loc {:line 29, :end-line 29, :column 1, :end-column 27}, :id "darkleaf.di.tutorial.z-two-databases-test/db-a-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def db-b (db-factory :b))", :nextjournal/render-opts {:loc {:line 30, :end-line 30, :column 1, :end-column 27}, :id "darkleaf.di.tutorial.z-two-databases-test/db-b-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn root\n  {::di/kind :component}\n  [{db-a `db-a\n    db-b `db-b}]\n  [db-a db-b])", :nextjournal/render-opts {:loc {:line 32, :end-line 36, :column 1, :end-column 15}, :id "darkleaf.di.tutorial.z-two-databases-test/root-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest root-test\n  (with-open [root (di/start `root {\"DB_A_URL\"      \"tcp://a\"\n                                    \"DB_A_USER\"     \"user_a\"\n                                    \"DB_A_PASSWORD\" \"secret\"\n                                    \"DB_B_URL\"      \"tcp://b\"\n                                    \"DB_B_USER\"     \"user_b\"\n                                    \"DB_B_PASSWORD\" \"super-secret\"})]\n    (t/is (= [[::db \"tcp://a\" \"user_a\" \"secret\"]\n              [::db \"tcp://b\" \"user_b\" \"super-secret\"]]\n             @root))))", :nextjournal/render-opts {:loc {:line 38, :end-line 47, :column 1, :end-column 23}, :id "darkleaf.di.tutorial.z-two-databases-test/root-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}