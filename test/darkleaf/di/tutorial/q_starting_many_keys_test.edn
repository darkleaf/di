{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Starting many keys", :emoji nil, :path "#starting-many-keys", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.tutorial.q-starting-many-keys-test), :file "test/darkleaf/di/tutorial/q_starting_many_keys_test.clj", :scope darkleaf.di.tutorial.q-starting-many-keys-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/tutorial/q_starting_many_keys_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Starting many keys", :description "The standard with-open does not support destructuring in bindings. Use di/with-open to handle resources with destructuring support."}, :title "Starting many keys", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5dr4kPFQuP3KpeDKA5exkwS6RAoSw3"} ["h1" {:id "starting-many-keys"} [:<> "Starting many keys"]]], :nextjournal/render-opts {:id "user/markdown-5dr4kPFQuP3KpeDKA5exkwS6RAoSw3"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5drzfWSDYkRGUGjzyWhiHQiKJx7KpS"} [:p [:<> "The standard "] [:code [:<> "with-open"]] [:<> " does not support destructuring in bindings."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "Use "] [:code [:<> "di/with-open"]] [:<> " to handle resources with destructuring support."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5drzfWSDYkRGUGjzyWhiHQiKJx7KpS"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def a :a)", :nextjournal/render-opts {:loc {:line 13, :end-line 13, :column 1, :end-column 11}, :id "darkleaf.di.tutorial.q-starting-many-keys-test/a-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def b :b)", :nextjournal/render-opts {:loc {:line 14, :end-line 14, :column 1, :end-column 11}, :id "darkleaf.di.tutorial.q-starting-many-keys-test/b-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest verbose-test\n  (di/with-open [[a b] (di/start ::root {::root (di/template [(di/ref `a) (di/ref `b)])})]\n    (t/is (= :a a))\n    (t/is (= :b b))))", :nextjournal/render-opts {:loc {:line 16, :end-line 19, :column 1, :end-column 22}, :id "darkleaf.di.tutorial.q-starting-many-keys-test/verbose-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5drhy58mE8RMoeRbVixndiUBfMX4D4"} [:p [:<> "The root container implements "] [:code [:<> "clojure.lang.Indexed"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "so you can use destructuring without derefing the root."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5drhy58mE8RMoeRbVixndiUBfMX4D4"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest indexed-test\n  (di/with-open [[a b] (di/start [`a `b])]\n    (t/is (= :a a))\n    (t/is (= :b b))))", :nextjournal/render-opts {:loc {:line 24, :end-line 27, :column 1, :end-column 22}, :id "darkleaf.di.tutorial.q-starting-many-keys-test/indexed-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5dt4RZe7SgGWAPcu4XDdVxTZXgppeB"} [:p [:<> "The root container implements "] [:code [:<> "clojure.lang.ILookup"]] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "so you can use destructuring without derefing the root."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.q-starting-many-keys-test/markdown-5dt4RZe7SgGWAPcu4XDdVxTZXgppeB"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest lookup-test\n  (di/with-open [{:keys [a b]} (di/start {:a `a :b `b})]\n    (t/is (= :a a))\n    (t/is (= :b b))))", :nextjournal/render-opts {:loc {:line 32, :end-line 35, :column 1, :end-column 22}, :id "darkleaf.di.tutorial.q-starting-many-keys-test/lookup-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}