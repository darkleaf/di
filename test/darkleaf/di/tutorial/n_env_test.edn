{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [{:title "Env", :emoji nil, :path "#env", :items []}], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.tutorial.n-env-test), :file "test/darkleaf/di/tutorial/n_env_test.clj", :scope darkleaf.di.tutorial.n-env-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/tutorial/n_env_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title "Env", :description "Like symbols and keywords, you can also use strings for keys. String keys are resolved into values of  environment variables."}, :title "Env", :blocks [{:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "user/markdown-5dsb2iMs7y7yt4tCq3SfNPdrz7whrV"} ["h1" {:id "env"} [:<> "Env"]]], :nextjournal/render-opts {:id "user/markdown-5dsb2iMs7y7yt4tCq3SfNPdrz7whrV"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.n-env-test/markdown-5dqzGx5X3MbdeoJ944UTZJh1BwP9dF"} [:p [:<> "Like symbols and keywords, you can also use strings for keys."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "String keys are resolved into values of  environment variables."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.n-env-test/markdown-5dqzGx5X3MbdeoJ944UTZJh1BwP9dF"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn root\n  {::di/kind :component}\n  [{path \"PATH\"}]\n  [:root path])", :nextjournal/render-opts {:loc {:line 13, :end-line 16, :column 1, :end-column 16}, :id "darkleaf.di.tutorial.n-env-test/root-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(def PATH (System/getenv \"PATH\"))", :nextjournal/render-opts {:loc {:line 18, :end-line 18, :column 1, :end-column 34}, :id "darkleaf.di.tutorial.n-env-test/PATH-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest root-test\n  (with-open [root (di/start `root)]\n    (t/is (= [:root PATH] @root))))", :nextjournal/render-opts {:loc {:line 20, :end-line 22, :column 1, :end-column 36}, :id "darkleaf.di.tutorial.n-env-test/root-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [:div.viewer.markdown-viewer.w-full.max-w-prose.px-8 {:data-block-id "darkleaf.di.tutorial.n-env-test/markdown-5duLnACogh3t7hCBRMfGnBvgtjdN6u"} [:p [:<> "As of 2.3.0, there is "] [:code [:<> "di/env-parsing"]] [:<> " registry middleware"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "to parse values of environment variables."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "You can define a dependency of env as a string key like \"PORT\","] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and its value will be a string."] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "With this middleware, you can define it as a qualified keyword like :env.long/PORT,"] [#viewer-eval nextjournal.clerk.render/inspect-presented {:nextjournal/value [:<> " "], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}] [:<> "and its value will be a number."]]], :nextjournal/render-opts {:id "darkleaf.di.tutorial.n-env-test/markdown-5duLnACogh3t7hCBRMfGnBvgtjdN6u"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/markdown-node-viewer, :render-fn #viewer-fn identity, :hash "5dsg4Bx9A9L7WvvCgamUoRtxUsmYCe"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn jetty\n  {::di/kind :component}\n  [{port :env.long/PORT\n    :or  {port 8080}}]\n  [:jetty port])", :nextjournal/render-opts {:loc {:line 31, :end-line 35, :column 1, :end-column 17}, :id "darkleaf.di.tutorial.n-env-test/jetty-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest jetty-test\n  (with-open [jetty (di/start `jetty\n                              (di/env-parsing {:env.long parse-long}))]\n    (t/is (= [:jetty 8080] @jetty)))\n  (with-open [jetty (di/start `jetty\n                              (di/env-parsing :env.long parse-long)\n                              {\"PORT\" \"8081\"})]\n    (t/is (= [:jetty 8081] @jetty))))", :nextjournal/render-opts {:loc {:line 37, :end-line 44, :column 1, :end-column 38}, :id "darkleaf.di.tutorial.n-env-test/jetty-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn required-env\n  {::di/kind :component}\n  [{enabled :env.bool/ENABLED}]\n  [:enabled enabled])", :nextjournal/render-opts {:loc {:line 46, :end-line 49, :column 1, :end-column 22}, :id "darkleaf.di.tutorial.n-env-test/required-env-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn optional-env\n  {::di/kind :component}\n  [{enabled :env.bool/ENABLED\n    :or {enabled true}}]\n  [:enabled enabled])", :nextjournal/render-opts {:loc {:line 51, :end-line 55, :column 1, :end-column 22}, :id "darkleaf.di.tutorial.n-env-test/optional-env-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest env-test\n  (t/is (thrown? clojure.lang.ExceptionInfo\n                 (di/start `required-env\n                           (di/env-parsing {:env.bool #(= \"true\" %)}))))\n\n  (with-open [sys (di/start `required-env\n                            (di/env-parsing {:env.bool #(= \"true\" %)})\n                            {\"ENABLED\" \"false\"})]\n    (t/is (= [:enabled false] @sys)))\n\n  (with-open [sys (di/start `optional-env\n                            (di/env-parsing {:env.bool #(= \"true\" %)}))]\n    (t/is (= [:enabled true] @sys)))\n\n  (with-open [sys (di/start `optional-env\n                            (di/env-parsing {:env.bool #(= \"true\" %)})\n                            {\"ENABLED\" \"false\"})]\n    (t/is (= [:enabled false] @sys))))", :nextjournal/render-opts {:loc {:line 57, :end-line 74, :column 1, :end-column 39}, :id "darkleaf.di.tutorial.n-env-test/env-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}