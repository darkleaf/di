{:path [], :nextjournal/value {:package :directory, :toc {:path [], :nextjournal/value [], :nextjournal/render-opts {:toc-visibility false, :set-hash? true}, :nextjournal/viewer {:name nextjournal.clerk.viewer/toc-viewer, :render-fn #viewer-fn nextjournal.clerk.render.navbar/render-items, :hash "5dtesrAmYqLZQQHSMEfFTNpmLtY4nC"}}, :sidenotes? false, :toc-visibility false, :atom-var-name->state #viewer-eval (nextjournal.clerk.render/intern-atoms! {}), :ns #viewer-eval (ns darkleaf.di.memoize-test), :file "test/darkleaf/di/memoize_test.clj", :scope darkleaf.di.memoize-test, :header {:path [], :nextjournal/value [:div.viewer.w-full.max-w-prose.px-8.not-prose.mt-3 [:div.mb-8.text-xs.sans-serif.text-slate-400 nil [:<> [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "./../../../../"} "Index"] [:span.mx-2 "â€¢"]] [:span "Generated with " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href "https://clerk.vision"} "Clerk"] [:<> " from " [:a.font-medium.border-b.border-dotted.border-slate-300.hover:text-indigo-500.hover:border-indigo-500.dark:border-slate-500.dark:hover:text-white.dark:hover:border-white.transition {:href nil} "test/darkleaf/di/memoize_test.clj" nil]]]]], :nextjournal/viewer {:name nextjournal.clerk.viewer/html-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-html, :hash "5drpr3yzJ1CcHNbRHnK2sVyn7YUmXB"}}, :open-graph {:type "article:clerk", :title nil, :description nil}, :blocks [{:path [], :nextjournal/value [{:path [0], :nextjournal/value "(ns darkleaf.di.memoize-test\n  (:require\n   [clojure.test :as t]\n   [darkleaf.di.core :as di]\n   [darkleaf.di.utils :refer [catch-some]]))", :nextjournal/render-opts {:loc {:line 1, :end-line 5, :column 1, :end-column 45}, :id "darkleaf.di.memoize-test/anon-expr-5dtvjxuwLF4gdw8k4jT1HmrnKuAj8w-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(set! *warn-on-reflection* true)", :nextjournal/render-opts {:loc {:line 7, :end-line 7, :column 1, :end-column 33}, :id "darkleaf.di.memoize-test/anon-expr-5dst5rqPjd8gcjnK4zTbJr8eGoTKZJ-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value true, :nextjournal/viewer {:name nextjournal.clerk.viewer/boolean-viewer, :render-fn #viewer-fn (fn [x] [:span.cmt-bool.inspected-value (str x)]), :hash "5drYZi1ixy8HcW8uKJ6GoMNhasTEGB"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dst5rqPjd8gcjnK4zTbJr8eGoTKZJ-result-1"}}, :nextjournal/blob-id "5dsYsRrJYh9oynTArcokE7APxQuZNJ"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dst5rqPjd8gcjnK4zTbJr8eGoTKZJ-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest memoize-test\n  (let [a         'a\n        identity* (memoize identity)]\n    (identity* a)\n    (t/is (not (identical? a  (identity  'a))))\n    (t/is      (identical? a  (identity* 'a)))))", :nextjournal/render-opts {:loc {:line 9, :end-line 14, :column 1, :end-column 49}, :id "darkleaf.di.memoize-test/memoize-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$memoize_test 0x585b81c1 \"darkleaf.di.memoize_test$memoize_test@585b81c1\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/memoize-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/memoize-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn- some+identical? [a b]\n  (and (some? a)\n       (some? b)\n       (identical? a b)))", :nextjournal/render-opts {:loc {:line 16, :end-line 19, :column 1, :end-column 26}, :id "darkleaf.di.memoize-test/some+identical?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$some_PLUS_identical_QMARK_ 0x4c0a2a2b \"darkleaf.di.memoize_test$some_PLUS_identical_QMARK_@4c0a2a2b\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/some+identical?-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/some+identical?-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn- some+not-identical? [a b]\n  (and (some? a)\n       (some? b)\n       (not (identical? a b))))", :nextjournal/render-opts {:loc {:line 21, :end-line 24, :column 1, :end-column 32}, :id "darkleaf.di.memoize-test/some+not-identical?-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$some_PLUS_not_identical_QMARK_ 0x59e9bb43 \"darkleaf.di.memoize_test$some_PLUS_not_identical_QMARK_@59e9bb43\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/some+not-identical?-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/some+not-identical?-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(defn a\n  {::di/kind :component}\n  [{_ ::param}]\n  (Object.))", :nextjournal/render-opts {:loc {:line 27, :end-line 30, :column 1, :end-column 13}, :id "darkleaf.di.memoize-test/a-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$a 0x5a6aaf9f \"darkleaf.di.memoize_test$a@5a6aaf9f\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/a-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/a-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest changed-not-identical-test\n  (with-open [mem    (di/->memoize    {::param (Object.)})\n              first  (di/start `a mem)\n              second (di/start `a mem {::param (Object.)})]\n    (t/is (some+not-identical? @first @second))))", :nextjournal/render-opts {:loc {:line 33, :end-line 37, :column 1, :end-column 50}, :id "darkleaf.di.memoize-test/changed-not-identical-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$changed_not_identical_test 0x5e3b689a \"darkleaf.di.memoize_test$changed_not_identical_test@5e3b689a\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-not-identical-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-not-identical-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest changed-equal-and-identical-test\n  (with-open [mem    (di/->memoize    {::param :equal-and-identical})\n              first  (di/start `a mem)\n              second (di/start `a mem {::param :equal-and-identical})]\n    (t/is (some+identical? @first @second))))", :nextjournal/render-opts {:loc {:line 40, :end-line 44, :column 1, :end-column 46}, :id "darkleaf.di.memoize-test/changed-equal-and-identical-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$changed_equal_and_identical_test 0x437d5a04 \"darkleaf.di.memoize_test$changed_equal_and_identical_test@437d5a04\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-and-identical-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-and-identical-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest changed-equal-but-not-identical-test\n  (with-open [mem    (di/->memoize    {::param 'equal-but-not-identical})\n              first  (di/start `a mem)\n              second (di/start `a mem {::param 'equal-but-not-identical})]\n    (t/is (some+identical? @first @second))))", :nextjournal/render-opts {:loc {:line 47, :end-line 51, :column 1, :end-column 46}, :id "darkleaf.di.memoize-test/changed-equal-but-not-identical-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$changed_equal_but_not_identical_test 0x57dad28b \"darkleaf.di.memoize_test$changed_equal_but_not_identical_test@57dad28b\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-but-not-identical-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-but-not-identical-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest changed-equal-but-different-test\n  (with-open [mem    (di/->memoize    {::param []})\n              first  (di/start `a mem)\n              second (di/start `a mem {::param '()})]\n    (t/is (some+identical? @first @second))))", :nextjournal/render-opts {:loc {:line 54, :end-line 58, :column 1, :end-column 46}, :id "darkleaf.di.memoize-test/changed-equal-but-different-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$changed_equal_but_different_test 0x584399b8 \"darkleaf.di.memoize_test$changed_equal_but_different_test@584399b8\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-but-different-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/changed-equal-but-different-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest start-stop-order-test\n  (let [log    (atom [])\n        log-mw (fn [key-predicate]\n                 (di/log :after-build!\n                         #(when (key-predicate (:key %))\n                            (swap! log conj [:start (:key %)]))\n                         :after-demolish!\n                         #(when (key-predicate (:key %))\n                            (swap! log conj [:stop  (:key %)]))))\n        mem    (di/->memoize {::param :param} (log-mw any?))]\n    (-> (di/start `a mem)\n        (di/stop))\n    (t/is (= [[:start ::param]\n              [:start `a]]\n             @log))\n    (swap! log empty)\n\n    (-> (di/start `a mem)\n        (di/stop))\n    (t/is (= [] @log))\n\n    (-> (di/start `a mem\n                  {::param :new-param}\n                  (log-mw #{::param}))\n        (di/stop))\n    (t/is (= [[:start ::param]\n              [:start `a]\n              [:stop ::param]]\n             @log))\n    (swap! log empty)\n\n    (di/stop mem)\n    (t/is (= [[:stop `a]\n              [:stop `a]\n              [:stop ::param]]\n             @log))\n    (swap! log empty)\n\n    (-> (di/start `a mem)\n        (di/stop))\n    (t/is (= [[:start ::param]\n              [:start `a]]\n             @log))))", :nextjournal/render-opts {:loc {:line 60, :end-line 102, :column 1, :end-column 22}, :id "darkleaf.di.memoize-test/start-stop-order-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$start_stop_order_test 0x5d394592 \"darkleaf.di.memoize_test$start_stop_order_test@5d394592\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/start-stop-order-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/start-stop-order-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest should-be-first-test\n  (with-open [mem (di/->memoize)]\n    (let [ex (catch-some (di/start `a {::param 42} mem))]\n      (t/is (= ::di/wrong-memoized-registry-position\n               (-> ex ex-data :type))))))", :nextjournal/render-opts {:loc {:line 104, :end-line 108, :column 1, :end-column 42}, :id "darkleaf.di.memoize-test/should-be-first-test-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$should_be_first_test 0x74bd894b \"darkleaf.di.memoize_test$should_be_first_test@74bd894b\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/should-be-first-test-result-1"}}, :nextjournal/blob-id nil}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/should-be-first-test-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest service-deps+body-change-test\n  (with-open [mem (di/->memoize {::param-1 42\n                                 ::param-2 0})]\n\n    (defn service-1 [{param ::param-1}]\n      [:a param])\n    (with-open [s (di/start `service-1 mem)]\n      (t/is (= [:a 42] (s))))\n\n    (defn service-1 [{param ::param-2}]\n      [:b param])\n    (with-open [s (di/start `service-1 mem)]\n      (t/is (= [:b 0] (s))))))", :nextjournal/render-opts {:loc {:line 111, :end-line 123, :column 1, :end-column 31}, :id "darkleaf.di.memoize-test/anon-expr-5drMDe1KdSzkGyeCiEGyB2fLRUcwgK-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$service_deps_PLUS_body_change_test 0x757253dd \"darkleaf.di.memoize_test$service_deps_PLUS_body_change_test@757253dd\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5drMDe1KdSzkGyeCiEGyB2fLRUcwgK-result-1"}}, :nextjournal/blob-id "5du1A6De8oErma5UYfxHKpB3CYDsB5"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5drMDe1KdSzkGyeCiEGyB2fLRUcwgK-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest component-deps+body-change-test\n  (with-open [mem (di/->memoize {::param-1 42\n                                 ::param-2 0})]\n\n    (defn component-1\n      {::di/kind :component}\n      [{param ::param-1}]\n      [:a param])\n    (with-open [s (di/start `component-1 mem)]\n      (t/is (= [:a 42] @s)))\n\n    (defn component-1\n      {::di/kind :component}\n      [{param ::param-2}]\n      [:b param])\n    (with-open [s (di/start `component-1 mem)]\n      (t/is (= [:b 0] @s)))))", :nextjournal/render-opts {:loc {:line 126, :end-line 142, :column 1, :end-column 30}, :id "darkleaf.di.memoize-test/anon-expr-5dsrhvAwcbBam1Qk4TbY47D1TDdoDa-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$component_deps_PLUS_body_change_test 0x31388a92 \"darkleaf.di.memoize_test$component_deps_PLUS_body_change_test@31388a92\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dsrhvAwcbBam1Qk4TbY47D1TDdoDa-result-1"}}, :nextjournal/blob-id "5dqsbopvy9Dm3SkbkxiekUdAbxskDx"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dsrhvAwcbBam1Qk4TbY47D1TDdoDa-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest var-type-change-test\n  (with-open [mem (di/->memoize {::param 42})]\n\n    (def var-type-change-var :just-value)\n    (with-open [s (di/start `var-type-change-var mem)]\n      (t/is (= :just-value @s)))\n\n    (defn var-type-change-var\n      {::di/kind :component}\n      [{param ::param}]\n      [:a param])\n    (with-open [s (di/start `var-type-change-var mem)]\n      (t/is (= [:a 42] @s)))))", :nextjournal/render-opts {:loc {:line 145, :end-line 157, :column 1, :end-column 31}, :id "darkleaf.di.memoize-test/anon-expr-5dt4EtmjTRqseEfCuxmgM96FczVibY-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$var_type_change_test 0x263a5cf2 \"darkleaf.di.memoize_test$var_type_change_test@263a5cf2\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dt4EtmjTRqseEfCuxmgM96FczVibY-result-1"}}, :nextjournal/blob-id "5dtAHAmwnAweVDAiZ6LLFQiWzGkVa1"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dt4EtmjTRqseEfCuxmgM96FczVibY-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest remove-watch-test\n  (def remove-watch-var :_)\n  (with-open [mem (di/->memoize)\n              s   (di/start `remove-watch-var mem)])\n  (t/is (= {} (.getWatches #'remove-watch-var))))", :nextjournal/render-opts {:loc {:line 160, :end-line 164, :column 1, :end-column 50}, :id "darkleaf.di.memoize-test/anon-expr-5dsYnwNWgJabSZ8eC5sXN8CrhwjMAc-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$remove_watch_test 0x3ed56eaf \"darkleaf.di.memoize_test$remove_watch_test@3ed56eaf\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dsYnwNWgJabSZ8eC5sXN8CrhwjMAc-result-1"}}, :nextjournal/blob-id "5dr4iJJC67LYo9jC8QUMZ47TjMn3ct"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dsYnwNWgJabSZ8eC5sXN8CrhwjMAc-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(t/deftest invalidation-log-test\n  (let [log    (atom [])\n        log-mw (di/log :after-build!\n                       #(swap! log conj [:start (:key %)])\n                       :after-demolish!\n                       #(swap! log conj [:stop  (:key %)]))\n        mem    (di/->memoize {::param :param} log-mw)]\n\n    (defn invalidation-a []\n      :a)\n\n    (defn invalidation-b [{a `invalidation-a}]\n      (a))\n\n    (-> (di/start `invalidation-b mem)\n        (di/stop))\n    (t/is (= [[:start `invalidation-a]\n              [:start `invalidation-b]]\n             @log))\n    (swap! log empty)\n\n    (-> (di/start `invalidation-b mem)\n        (di/stop))\n    (t/is (= [] @log))\n\n\n    (defn invalidation-a []\n      :a')\n\n    ;; A service without arguments is just a var\n    ;; so `invalidation-b` received the same arguments.\n    (-> (di/start `invalidation-b mem)\n        (di/stop))\n    (t/is (= [[:start `invalidation-a]]\n             @log))\n    (swap! log empty)\n\n\n    (defn invalidation-a [{param ::param}]\n      :a'')\n\n    (-> (di/start `invalidation-b mem)\n        (di/stop))\n    (t/is (= [[:start ::param]\n              [:start `invalidation-a]\n              [:start `invalidation-b]]\n             @log))\n    (swap! log empty)\n\n\n    (di/stop mem)\n    (t/is (= [[:stop `invalidation-b]\n              [:stop `invalidation-a]\n              [:stop ::param]\n              [:stop `invalidation-a]\n              [:stop `invalidation-b]\n              [:stop `invalidation-a]]\n             @log))))", :nextjournal/render-opts {:loc {:line 168, :end-line 225, :column 1, :end-column 22}, :id "darkleaf.di.memoize-test/anon-expr-5ds3aJCQ5tQxEHL6X1EUBTZbVVE1UG-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value "#object[darkleaf.di.memoize_test$invalidation_log_test 0x59de2e13 \"darkleaf.di.memoize_test$invalidation_log_test@59de2e13\"]", :nextjournal/viewer {:name nextjournal.clerk.viewer/read+inspect-viewer, :render-fn #viewer-fn (fn [x] (try [nextjournal.clerk.render/inspect (nextjournal.clerk.viewer/read-string-without-tag-table x)] (catch js/Error _e (nextjournal.clerk.render/render-unreadable-edn x)))), :hash "5dt2ru159tAMavCJULP69Zvz1i4Zfd"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5ds3aJCQ5tQxEHL6X1EUBTZbVVE1UG-result-1"}}, :nextjournal/blob-id "5dtozm1DeWr3SMDLVXj5gFv3LhCFjy"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5ds3aJCQ5tQxEHL6X1EUBTZbVVE1UG-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}} {:path [], :nextjournal/value [{:path [0], :nextjournal/value "(comment\n\n  (require '[clj-async-profiler.core :as prof])\n  (prof/serve-ui 8080)\n\n\n  (def N 10000)\n\n  (prof/profile {}\n    (dotimes [_ N]\n      (di/start `a {::param 42})))\n\n\n\n  (let [mem (di/->memoize {::param 42})]\n    (prof/profile {}\n      (dotimes [_ N]\n        (di/start `a mem))))\n\n\n  (prof/generate-diffgraph 1 2 {})\n\n\n\n  (time\n    (dotimes [_ N]\n      (di/start `a {::param 42})))\n\n  (let [mem (di/->memoize {::param 42})]\n    (time\n      (dotimes [_ N]\n        (di/start `a mem))))\n\n\n ,,,)", :nextjournal/render-opts {:loc {:line 227, :end-line 261, :column 1, :end-column 6}, :id "darkleaf.di.memoize-test/anon-expr-5dr2kPrvhDpAYnG3y2K752UdUg4tUZ-code"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/code-block-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-code-block, :hash "5dru1FUcVRTRrVKJFbNw4FG2wXmiwB"}} {:path [1], :nextjournal/value {:nextjournal/presented {:path [1], :nextjournal/value nil, :nextjournal/viewer {:name nextjournal.clerk.viewer/nil-viewer, :render-fn #viewer-fn (fn [_] [:span.cmt-default.inspected-value "nil"]), :hash "5ds5uDqqy4yJDMFDdH4gQZN84hJLZM"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dr2kPrvhDpAYnG3y2K752UdUg4tUZ-result-1"}}, :nextjournal/blob-id "5du9L3WkugUFjzS2KwhyZbYBGUhhuZ"}, :nextjournal/render-opts {:id "darkleaf.di.memoize-test/anon-expr-5dr2kPrvhDpAYnG3y2K752UdUg4tUZ-result-1"}, :nextjournal/viewer {:name nextjournal.clerk.viewer/result-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-result, :hash "5dtGVHesd2XCTLFYF3aY4kJvkrX1x1"}}], :nextjournal/viewer {:name nextjournal.clerk.viewer/cell-viewer, :render-fn #viewer-fn (fn [xs opts] (into [:<>] (nextjournal.clerk.render/inspect-children opts) xs)), :hash "5dtX6xLh3vbeFdswBY6jLXmB8QTqo2"}}]}, :nextjournal/viewer {:name nextjournal.clerk.viewer/notebook-viewer, :render-fn #viewer-fn nextjournal.clerk.render/render-notebook, :hash "5duAFDxE4sCnRX71Wo6zeCpC9C3djE"}}